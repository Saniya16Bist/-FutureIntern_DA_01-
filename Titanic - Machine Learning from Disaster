{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4e60198a",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:12.387527Z",
     "iopub.status.busy": "2024-08-29T17:14:12.387062Z",
     "iopub.status.idle": "2024-08-29T17:14:12.876183Z",
     "shell.execute_reply": "2024-08-29T17:14:12.874541Z"
    },
    "papermill": {
     "duration": 0.50333,
     "end_time": "2024-08-29T17:14:12.879145",
     "exception": false,
     "start_time": "2024-08-29T17:14:12.375815",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/titanic-machine-learning-from-disaster/train.csv\n",
      "/kaggle/input/titanic-machine-learning-from-disaster/test.csv\n",
      "/kaggle/input/titanic-machine-learning-from-disaster/gender_submission.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2c1115f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:12.900224Z",
     "iopub.status.busy": "2024-08-29T17:14:12.898871Z",
     "iopub.status.idle": "2024-08-29T17:14:14.873855Z",
     "shell.execute_reply": "2024-08-29T17:14:14.872580Z"
    },
    "papermill": {
     "duration": 1.988613,
     "end_time": "2024-08-29T17:14:14.877046",
     "exception": false,
     "start_time": "2024-08-29T17:14:12.888433",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "75563db0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:14.899248Z",
     "iopub.status.busy": "2024-08-29T17:14:14.897762Z",
     "iopub.status.idle": "2024-08-29T17:14:14.939160Z",
     "shell.execute_reply": "2024-08-29T17:14:14.938009Z"
    },
    "papermill": {
     "duration": 0.055819,
     "end_time": "2024-08-29T17:14:14.941941",
     "exception": false,
     "start_time": "2024-08-29T17:14:14.886122",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "gender_submission = pd.read_csv('/kaggle/input/titanic-machine-learning-from-disaster/gender_submission.csv')\n",
    "train_data = pd.read_csv('/kaggle/input/titanic-machine-learning-from-disaster/train.csv')\n",
    "test_data = pd.read_csv('/kaggle/input/titanic-machine-learning-from-disaster/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fc3c68d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:14.962596Z",
     "iopub.status.busy": "2024-08-29T17:14:14.961528Z",
     "iopub.status.idle": "2024-08-29T17:14:14.984207Z",
     "shell.execute_reply": "2024-08-29T17:14:14.982915Z"
    },
    "papermill": {
     "duration": 0.035913,
     "end_time": "2024-08-29T17:14:14.986945",
     "exception": false,
     "start_time": "2024-08-29T17:14:14.951032",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived\n",
       "0          892         0\n",
       "1          893         1\n",
       "2          894         0\n",
       "3          895         0\n",
       "4          896         1"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gender_submission.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a4d81c56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:15.007466Z",
     "iopub.status.busy": "2024-08-29T17:14:15.007026Z",
     "iopub.status.idle": "2024-08-29T17:14:15.028876Z",
     "shell.execute_reply": "2024-08-29T17:14:15.027729Z"
    },
    "papermill": {
     "duration": 0.035422,
     "end_time": "2024-08-29T17:14:15.031576",
     "exception": false,
     "start_time": "2024-08-29T17:14:14.996154",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d64e5a84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:15.053008Z",
     "iopub.status.busy": "2024-08-29T17:14:15.052397Z",
     "iopub.status.idle": "2024-08-29T17:14:15.071711Z",
     "shell.execute_reply": "2024-08-29T17:14:15.070446Z"
    },
    "papermill": {
     "duration": 0.033061,
     "end_time": "2024-08-29T17:14:15.074402",
     "exception": false,
     "start_time": "2024-08-29T17:14:15.041341",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>Kelly, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330911</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>363272</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>Myles, Mr. Thomas Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240276</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>3</td>\n",
       "      <td>Wirz, Mr. Albert</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>315154</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>3</td>\n",
       "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3101298</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Pclass                                          Name     Sex  \\\n",
       "0          892       3                              Kelly, Mr. James    male   \n",
       "1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n",
       "2          894       2                     Myles, Mr. Thomas Francis    male   \n",
       "3          895       3                              Wirz, Mr. Albert    male   \n",
       "4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n",
       "\n",
       "    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n",
       "0  34.5      0      0   330911   7.8292   NaN        Q  \n",
       "1  47.0      1      0   363272   7.0000   NaN        S  \n",
       "2  62.0      0      0   240276   9.6875   NaN        Q  \n",
       "3  27.0      0      0   315154   8.6625   NaN        S  \n",
       "4  22.0      1      1  3101298  12.2875   NaN        S  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5e3c32c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:15.096475Z",
     "iopub.status.busy": "2024-08-29T17:14:15.096016Z",
     "iopub.status.idle": "2024-08-29T17:14:15.125601Z",
     "shell.execute_reply": "2024-08-29T17:14:15.124054Z"
    },
    "papermill": {
     "duration": 0.043869,
     "end_time": "2024-08-29T17:14:15.128419",
     "exception": false,
     "start_time": "2024-08-29T17:14:15.084550",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "train_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5a9518ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:15.151393Z",
     "iopub.status.busy": "2024-08-29T17:14:15.150942Z",
     "iopub.status.idle": "2024-08-29T17:14:15.191550Z",
     "shell.execute_reply": "2024-08-29T17:14:15.190166Z"
    },
    "papermill": {
     "duration": 0.055851,
     "end_time": "2024-08-29T17:14:15.194487",
     "exception": false,
     "start_time": "2024-08-29T17:14:15.138636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
       "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
       "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
       "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  \n",
       "count  891.000000  891.000000  \n",
       "mean     0.381594   32.204208  \n",
       "std      0.806057   49.693429  \n",
       "min      0.000000    0.000000  \n",
       "25%      0.000000    7.910400  \n",
       "50%      0.000000   14.454200  \n",
       "75%      0.000000   31.000000  \n",
       "max      6.000000  512.329200  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f23db3d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:15.217229Z",
     "iopub.status.busy": "2024-08-29T17:14:15.216797Z",
     "iopub.status.idle": "2024-08-29T17:14:15.240298Z",
     "shell.execute_reply": "2024-08-29T17:14:15.239027Z"
    },
    "papermill": {
     "duration": 0.038161,
     "end_time": "2024-08-29T17:14:15.243168",
     "exception": false,
     "start_time": "2024-08-29T17:14:15.205007",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass   Name    Sex    Age  SibSp  Parch  Ticket  \\\n",
       "0          False     False   False  False  False  False  False  False   False   \n",
       "1          False     False   False  False  False  False  False  False   False   \n",
       "2          False     False   False  False  False  False  False  False   False   \n",
       "3          False     False   False  False  False  False  False  False   False   \n",
       "4          False     False   False  False  False  False  False  False   False   \n",
       "..           ...       ...     ...    ...    ...    ...    ...    ...     ...   \n",
       "886        False     False   False  False  False  False  False  False   False   \n",
       "887        False     False   False  False  False  False  False  False   False   \n",
       "888        False     False   False  False  False   True  False  False   False   \n",
       "889        False     False   False  False  False  False  False  False   False   \n",
       "890        False     False   False  False  False  False  False  False   False   \n",
       "\n",
       "      Fare  Cabin  Embarked  \n",
       "0    False   True     False  \n",
       "1    False  False     False  \n",
       "2    False   True     False  \n",
       "3    False  False     False  \n",
       "4    False   True     False  \n",
       "..     ...    ...       ...  \n",
       "886  False   True     False  \n",
       "887  False  False     False  \n",
       "888  False   True     False  \n",
       "889  False  False     False  \n",
       "890  False   True     False  \n",
       "\n",
       "[891 rows x 12 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking missing values\n",
    "train_data.isnull()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3d408990",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:15.268722Z",
     "iopub.status.busy": "2024-08-29T17:14:15.268227Z",
     "iopub.status.idle": "2024-08-29T17:14:15.279082Z",
     "shell.execute_reply": "2024-08-29T17:14:15.277093Z"
    },
    "papermill": {
     "duration": 0.027614,
     "end_time": "2024-08-29T17:14:15.282195",
     "exception": false,
     "start_time": "2024-08-29T17:14:15.254581",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId    0\n",
       "Survived       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#summarizing missing values in each column\n",
    "gender_submission.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "aa089f89",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:15.306513Z",
     "iopub.status.busy": "2024-08-29T17:14:15.306073Z",
     "iopub.status.idle": "2024-08-29T17:14:15.316570Z",
     "shell.execute_reply": "2024-08-29T17:14:15.315323Z"
    },
    "papermill": {
     "duration": 0.026012,
     "end_time": "2024-08-29T17:14:15.319176",
     "exception": false,
     "start_time": "2024-08-29T17:14:15.293164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#summarizing missing values in each column\n",
    "train_data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8ab405be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:15.343731Z",
     "iopub.status.busy": "2024-08-29T17:14:15.343251Z",
     "iopub.status.idle": "2024-08-29T17:14:15.353779Z",
     "shell.execute_reply": "2024-08-29T17:14:15.352136Z"
    },
    "papermill": {
     "duration": 0.026577,
     "end_time": "2024-08-29T17:14:15.356782",
     "exception": false,
     "start_time": "2024-08-29T17:14:15.330205",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age             86\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             1\n",
       "Cabin          327\n",
       "Embarked         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#summarizing missing values in each column\n",
    "test_data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a519c3a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:15.381787Z",
     "iopub.status.busy": "2024-08-29T17:14:15.381290Z",
     "iopub.status.idle": "2024-08-29T17:14:15.751464Z",
     "shell.execute_reply": "2024-08-29T17:14:15.750133Z"
    },
    "papermill": {
     "duration": 0.38625,
     "end_time": "2024-08-29T17:14:15.754321",
     "exception": false,
     "start_time": "2024-08-29T17:14:15.368071",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#creating hist plot to visulaize potential outliers\n",
    "sns.histplot(x=train_data['Age'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "586754a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:15.780212Z",
     "iopub.status.busy": "2024-08-29T17:14:15.779734Z",
     "iopub.status.idle": "2024-08-29T17:14:16.021253Z",
     "shell.execute_reply": "2024-08-29T17:14:16.019749Z"
    },
    "papermill": {
     "duration": 0.257653,
     "end_time": "2024-08-29T17:14:16.023927",
     "exception": false,
     "start_time": "2024-08-29T17:14:15.766274",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#creating violin plot to visulaize potential outliers\n",
    "sns.violinplot(x=test_data['Age'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "17a94e73",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:16.051470Z",
     "iopub.status.busy": "2024-08-29T17:14:16.050967Z",
     "iopub.status.idle": "2024-08-29T17:14:16.257185Z",
     "shell.execute_reply": "2024-08-29T17:14:16.255837Z"
    },
    "papermill": {
     "duration": 0.223876,
     "end_time": "2024-08-29T17:14:16.260085",
     "exception": false,
     "start_time": "2024-08-29T17:14:16.036209",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#creating box plot to visulaize potential outliers\n",
    "sns.boxplot(x=train_data['Fare'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "16a7873c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:16.286695Z",
     "iopub.status.busy": "2024-08-29T17:14:16.286220Z",
     "iopub.status.idle": "2024-08-29T17:14:18.034244Z",
     "shell.execute_reply": "2024-08-29T17:14:18.033119Z"
    },
    "papermill": {
     "duration": 1.765375,
     "end_time": "2024-08-29T17:14:18.037884",
     "exception": false,
     "start_time": "2024-08-29T17:14:16.272509",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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qDXh68SJE7r33ns1ZswYRUdH+x2XlpamhQsXau3atZo7d66ysrLUs2dPHTlyxO8806ZNU15ent327t1bHZsAAAAQ2NOO5XXq1CmNHj1axhjNnTu3zLGepzEvvPBCpaWlqXnz5lq6dKkmTZrkcx6XyyWXy1WlNQMAAPhS48OXO3h9++23euedd8o86uVLbGys2rZtq127dlVThQAAAOVXo087uoPXzp079fbbb6tRo0YVXsbRo0e1e/duNW7cuBoqBAAAqJiAhq+jR49q+/bt2r59uyQpKytL27dvV3Z2tk6dOqWRI0dq69at+tvf/qbCwkLl5OQoJydHJ0+etJfRt29fzZo1y7591113aePGjdqzZ482bdqkYcOGKTg4WGPGjHF68wAAAEoJ6GnHrVu3qk+fPvbtjIwMSdL48eP1wAMP6LXXXpMkde7c2Wu+d999V71795Yk7d69W4cOHbLv27dvn8aMGaPvv/9e8fHx6tGjh7Zs2aL4+Pjq3RgAAIByCGj46t27t4wxfu8v6z63PXv2eN1esmTJuZYFAABQbSp12vHKK6/U4cOHS03Pz8/XlVdeea41AQAA1FmVCl8bNmzwuu7K7cSJE3r//ffPuSgAAIC6qkKnHT/77DO7/+9//1s5OTn27cLCQq1du1ZNmjSpuuoAAADqmAqFr86dO8uyLFmW5fP0YkREhP70pz9VWXEAAAB1TYXCV1ZWlowxatWqlT766COvXxCGhYUpISFBwcHBVV4kAABAXVGh8NW8eXNJUlFRUbUUAwAAUNdV+k9N7Ny5U++++64OHDhQKoxNnz79nAsDAACoiyoVvl544QXddtttiouLU1JSkizLsu+zLIvwBQAA4EelwtcjjzyiP/zhD7r33nuruh4AAIA6rVJ/5+uHH37QqFGjqroWAACAOq9S4WvUqFF66623qroWAACAOq9Spx3PO+883X///dqyZYs6deqk0NBQr/tvv/32KikOAACgrqlU+Hr++edVv359bdy4URs3bvS6z7IswhcAAIAflQpfWVlZVV0HAADAz0KlrvkCAABA5VTqyNeNN95Y5v3z58+vVDEAAAB1XaXC1w8//OB1+9SpU/riiy90+PBhn//hNgAAAIpVKnytXLmy1LSioiLddtttat269TkXhbpp7Z+vtvsDJ70ZwEpKe+6vAyRJt/zfPwJcCQCgrquya76CgoKUkZGhmTNnVtUiAQAA6pwqveB+9+7d+umnn6pykQAAAHVKpU47ZmRkeN02xmj//v1as2aNxo8fXyWFAQAA1EWVCl+ffPKJ1+2goCDFx8frySefPOsvIQEAAH7OKhW+3n333aquAwAA4GehUuHL7eDBg9qxY4ckqV27doqPj6+SogAAAOqqSl1wf+zYMd14441q3LixrrjiCl1xxRVKTk7WpEmT9OOPP1Z1jQAAAHVGpcJXRkaGNm7cqNdff12HDx/W4cOHtXr1am3cuFF33nlnVdcIAABQZ1TqtOPy5cu1bNky9e7d25529dVXKyIiQqNHj9bcuXOrqj4AAIA6pVJHvn788UclJiaWmp6QkMBpRwAAgDJUKnx169ZNM2bM0IkTJ+xpx48f14MPPqhu3bpVWXEAAAB1TaVOOz799NMaOHCgmjZtqtTUVEnSp59+KpfLpbfeeqtKCwQAAKhLKnXkq1OnTtq5c6cyMzPVuXNnde7cWY8++qh27dqlDh06lHs57733ngYPHqzk5GRZlqVVq1Z53W+M0fTp09W4cWNFRESoX79+2rlz51mXO3v2bLVo0ULh4eFKS0vTRx99VNFNBAAAqBaVOvKVmZmpxMRETZ482Wv6/PnzdfDgQd17773lWs6xY8eUmpqqG2+8UcOHDy91/+OPP65nn31WixYtUsuWLXX//fdrwIAB+ve//63w8HCfy3zllVeUkZGhefPmKS0tTU8//bQGDBigHTt2KCEhoeIbCwAAUIUqdeTrueeeU/v27UtN79Chg+bNm1fu5aSnp+uRRx7RsGHDSt1njNHTTz+t++67T0OGDNGFF16ov/zlL/ruu+9KHSHz9NRTT2ny5MmaOHGiLrjgAs2bN0/16tXT/Pnzy10XAABAdalU+MrJyVHjxo1LTY+Pj9f+/fvPuShJysrKUk5Ojvr162dPi4mJUVpamjZv3uxznpMnT2rbtm1e8wQFBalfv35+55GkgoIC5efnezUAAIDqUKnwlZKSon/+85+lpv/zn/9UcnLyORclFQc8SaX+pEViYqJ9X0mHDh1SYWFhheaRik+jxsTE2C0lJeUcq69dPp43WB/PGxzoMgAA+Fmo1DVfkydP1h133KFTp07pyiuvlCStX79e99xzT638C/fTpk1TRkaGfTs/P/9nF8AAAIAzKhW+7r77bn3//ff65S9/qZMnT0qSwsPDde+992ratGlVUlhSUpIkKTc31+sUZ25urjp37uxznri4OAUHBys3N9drem5urr08X1wul1wu17kXDQAAcBaVOu1oWZYee+wxHTx4UFu2bNGnn36q//3vf5o+fXqVFdayZUslJSVp/fr19rT8/Hx9+OGHfv+Qa1hYmLp06eI1T1FRkdavX88ffwUAADVCpY58udWvX1+XXnpppec/evSodu3aZd/OysrS9u3b1bBhQzVr1kx33HGHHnnkEbVp08b+UxPJyckaOnSoPU/fvn01bNgwTZ06VVLxf/o9fvx4XXLJJeratauefvppHTt2TBMnTqx0nQAAAFXlnMLXudq6dav69Olj33ZfdzV+/HgtXLhQ99xzj44dO6abb75Zhw8fVo8ePbR27Vqvv/G1e/duHTp0yL593XXX6eDBg5o+fbpycnLUuXNnrV271uf/RQkAAOC0gIav3r17yxjj937LsvTQQw/poYce8jtmz549paZNnTrVPhIGAABQk1Tqmi8AAABUDuELAADAQYQvAAAABxG+AAAAHET4AgAAcBDhCwAAwEGELwAAAAcRvgAAABxE+AIAAHAQ4QsAAMBBhC8H5c59Qrlznzjd/6Ny5/4xwBUBAACnEb4AAAAcRPgCAABwEOELAADAQYQvAAAABxG+AAAAHET4AgAAcBDhCwAAwEGELwAAAAcRvgAAABxE+AIAAHAQ4QsAAMBBhC8AAAAHEb4AAAAcRPgCAABwEOELAADAQYQvAAAABxG+UGXefXGQ3n1xULUse9mCgVq2YGC1LBu12zXL5+ua5fMDXQYAlBvhCwAAwEGELwAAAAcRvgAAABxU48NXixYtZFlWqTZlyhSf4xcuXFhqbHh4uMNVAwAA+BYS6ALO5l//+pcKCwvt21988YWuuuoqjRo1yu880dHR2rFjh33bsqxqrREAAKC8anz4io+P97r96KOPqnXr1urVq5ffeSzLUlJSUnWXBgAAUGE1/rSjp5MnT+qll17SjTfeWObRrKNHj6p58+ZKSUnRkCFD9OWXX5a53IKCAuXn53s1AACA6lCrwteqVat0+PBhTZgwwe+Ydu3aaf78+Vq9erVeeuklFRUVqXv37tq3b5/feTIzMxUTE2O3lJSUaqgeAACgloWvP//5z0pPT1dycrLfMd26ddO4cePUuXNn9erVSytWrFB8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gNJCAl1AWU6ePKlt27Zp2rRp9rSgoCD169dPmzdv9jnP5s2blZGR4TVtwIABWrVqld/1FBQUqKCgwL6dl5cnSTpy4vjpKYVnBltFHnMWT3fl5+vI8eOl+uH5+Tpy/ESpfoSffr38fB05XlxHpEc/Pz9fR46flCQZc9Jee5E55VGJR98yHv0z1f50enp+fr6OHj911v6xKugXedTi+ch59S3f0wt9zJufn68fj/901v7xKuj7q9fzMfWs3eux9qj3xI9nll1Qwf5JP/1TPvo/WWdeA/J4bUjB8skYjxulX9fFyy7w6J+ohr77Peb5PdCjb/xM9+hbskotr/z9HyvVt7xqsTx65ak3yGN5x6q5f9TH+oP99D0/DjymW2f6RafHFL8ej9j9Aj/9Ez77kR79ejpu9yN89kM8Ht9THi9Zz+nBntM9+u7p+flhOmYv27Pv8u4fr0g/XEd99IM8119kPPry2Q/yMSY/v56OnDhSqh+ZH+nRz7f79Ur1j5a7b53l8614uvEzvfReMiI/X0dOHDvTP17cDy+z/2Ol+p77Lev0Xtf9uW289m81kKnB/vvf/xpJZtOmTV7T7777btO1a1ef84SGhprFixd7TZs9e7ZJSEjwu54ZM2YYSTQajUaj0epA27t377mHkGpU4087OmHatGnKy8uz2w8//KDt27dLkvbu3au9e/fWqv6///3vGlNLXay3NtdOvdROvYHv17baa2O9ycnJqslq9GnHuLg4BQcHKzc312t6bm6ukpKSfM6TlJRUofGS5HK55HK5vKYFBRXn0ujoaHtabelHRUXVmFrqYr21uXbqpXbqDXy/ttVe2+pt0qSJ/RleU9Xo6sLCwtSlSxetX7/enlZUVKT169erW7duPufp1q2b13hJWrdund/xAAAATqrRR74kKSMjQ+PHj9cll1yirl276umnn9axY8c0ceJESdK4cePUpEkTZWZmSpJ+/etfq1evXnryySc1aNAgLVmyRFu3btXzzz8fyM0AAACQVAvC13XXXaeDBw9q+vTpysnJUefOnbV27VolJiZKkrKzs70OL3bv3l2LFy/Wfffdp9/97ndq06aNVq1apY4dO1ZovS6XSzNmzLBPR9amfnR0dI2ppS7WW5trp15qp97A92tb7bWtXne/JrOMqem/xwQAAKg7avQ1XwAAAHUN4QsAAMBBhC8AAAAH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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#creating count plot to visulaize potential outliers\n",
    "sns.countplot(x=test_data['Fare'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "064496ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:18.067307Z",
     "iopub.status.busy": "2024-08-29T17:14:18.066185Z",
     "iopub.status.idle": "2024-08-29T17:14:18.075147Z",
     "shell.execute_reply": "2024-08-29T17:14:18.073913Z"
    },
    "papermill": {
     "duration": 0.026628,
     "end_time": "2024-08-29T17:14:18.078082",
     "exception": false,
     "start_time": "2024-08-29T17:14:18.051454",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/3151993203.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  train_data['Age'].fillna(train_data['Age'].mean(),inplace=True)\n",
      "/tmp/ipykernel_18/3151993203.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  test_data['Age'].fillna(test_data['Age'].mean(),inplace=True)\n"
     ]
    }
   ],
   "source": [
    "#replacing missing values in a age with the mean of the column\n",
    "train_data['Age'].fillna(train_data['Age'].mean(),inplace=True)\n",
    "test_data['Age'].fillna(test_data['Age'].mean(),inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ace86460",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:18.106763Z",
     "iopub.status.busy": "2024-08-29T17:14:18.105751Z",
     "iopub.status.idle": "2024-08-29T17:14:18.113946Z",
     "shell.execute_reply": "2024-08-29T17:14:18.112588Z"
    },
    "papermill": {
     "duration": 0.025928,
     "end_time": "2024-08-29T17:14:18.117328",
     "exception": false,
     "start_time": "2024-08-29T17:14:18.091400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/1229791487.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  train_data['Fare'].fillna(train_data['Fare'].mean(),inplace=True)\n",
      "/tmp/ipykernel_18/1229791487.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  test_data['Fare'].fillna(test_data['Fare'].mean(),inplace=True)\n"
     ]
    }
   ],
   "source": [
    "#replacing missing values in a Fare with the mean of the column\n",
    "train_data['Fare'].fillna(train_data['Fare'].mean(),inplace=True)\n",
    "test_data['Fare'].fillna(test_data['Fare'].mean(),inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "5c3558b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:18.146427Z",
     "iopub.status.busy": "2024-08-29T17:14:18.146003Z",
     "iopub.status.idle": "2024-08-29T17:14:18.156166Z",
     "shell.execute_reply": "2024-08-29T17:14:18.154766Z"
    },
    "papermill": {
     "duration": 0.028045,
     "end_time": "2024-08-29T17:14:18.159325",
     "exception": false,
     "start_time": "2024-08-29T17:14:18.131280",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#removing the missing null values from Cabin\n",
    "train_data.drop(columns=['Cabin'],inplace=True)\n",
    "test_data.drop(columns=['Cabin'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "41acf7f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:18.187702Z",
     "iopub.status.busy": "2024-08-29T17:14:18.187267Z",
     "iopub.status.idle": "2024-08-29T17:14:18.198099Z",
     "shell.execute_reply": "2024-08-29T17:14:18.196757Z"
    },
    "papermill": {
     "duration": 0.028252,
     "end_time": "2024-08-29T17:14:18.200878",
     "exception": false,
     "start_time": "2024-08-29T17:14:18.172626",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Embarked\n",
       "S    644\n",
       "C    168\n",
       "Q     77\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data[\"Embarked\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "32f99813",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:18.230077Z",
     "iopub.status.busy": "2024-08-29T17:14:18.229570Z",
     "iopub.status.idle": "2024-08-29T17:14:18.239814Z",
     "shell.execute_reply": "2024-08-29T17:14:18.238003Z"
    },
    "papermill": {
     "duration": 0.029427,
     "end_time": "2024-08-29T17:14:18.243597",
     "exception": false,
     "start_time": "2024-08-29T17:14:18.214170",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/3214542785.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  train_data['Embarked'].fillna(train_data['Age'].mean(),inplace=True)\n",
      "/tmp/ipykernel_18/3214542785.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  test_data['Embarked'].fillna(test_data['Age'].mean(),inplace=True)\n"
     ]
    }
   ],
   "source": [
    "#Replacing missing values from Embarked that contains categorical variable\n",
    "train_data['Embarked'].fillna(train_data['Age'].mean(),inplace=True)\n",
    "test_data['Embarked'].fillna(test_data['Age'].mean(),inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "29bed7bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:18.272900Z",
     "iopub.status.busy": "2024-08-29T17:14:18.272445Z",
     "iopub.status.idle": "2024-08-29T17:14:18.279851Z",
     "shell.execute_reply": "2024-08-29T17:14:18.278468Z"
    },
    "papermill": {
     "duration": 0.024765,
     "end_time": "2024-08-29T17:14:18.282396",
     "exception": false,
     "start_time": "2024-08-29T17:14:18.257631",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "outliers=[]\n",
    "def detect_outliers(data):\n",
    "    threshold=3\n",
    "    mean=np.mean(data)\n",
    "    std=np.std(data)\n",
    "    \n",
    "    for i in data:\n",
    "        z_score=(i- mean)/std\n",
    "        if np.abs(z_score) > threshold:\n",
    "            outliers.append(y)\n",
    "    return outliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "3a948679",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:18.311572Z",
     "iopub.status.busy": "2024-08-29T17:14:18.311117Z",
     "iopub.status.idle": "2024-08-29T17:14:18.320150Z",
     "shell.execute_reply": "2024-08-29T17:14:18.318756Z"
    },
    "papermill": {
     "duration": 0.026868,
     "end_time": "2024-08-29T17:14:18.322872",
     "exception": false,
     "start_time": "2024-08-29T17:14:18.296004",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#calculating the z-score for a column\n",
    "z_scores =stats.zscore(train_data['Age'])\n",
    "\n",
    "#identifying outliers based on z-score threshold\n",
    "outlier_indices = (z_scores > 3) | (z_scores < -3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b8b7b51a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:18.352065Z",
     "iopub.status.busy": "2024-08-29T17:14:18.351568Z",
     "iopub.status.idle": "2024-08-29T17:14:18.359473Z",
     "shell.execute_reply": "2024-08-29T17:14:18.358149Z"
    },
    "papermill": {
     "duration": 0.026127,
     "end_time": "2024-08-29T17:14:18.362365",
     "exception": false,
     "start_time": "2024-08-29T17:14:18.336238",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "cleaned_titanic_df = train_data[~outlier_indices]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "a46558ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-29T17:14:18.390943Z",
     "iopub.status.busy": "2024-08-29T17:14:18.390404Z",
     "iopub.status.idle": "2024-08-29T17:14:18.582483Z",
     "shell.execute_reply": "2024-08-29T17:14:18.581187Z"
    },
    "papermill": {
     "duration": 0.209798,
     "end_time": "2024-08-29T17:14:18.585436",
     "exception": false,
     "start_time": "2024-08-29T17:14:18.375638",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,6))\n",
    "sns.boxplot(data = train_data['Age'])\n",
    "plt.xticks(rotation=65)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2d81ff76",
   "metadata": {
    "papermill": {
     "duration": 0.013251,
     "end_time": "2024-08-29T17:14:18.612437",
     "exception": false,
     "start_time": "2024-08-29T17:14:18.599186",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 1620427,
     "sourceId": 2663884,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 10.21917,
   "end_time": "2024-08-29T17:14:19.349131",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-29T17:14:09.129961",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
